<% include layout.ejs %>

<h1><%= title %></h1>
<p>Current time and date:</p>
<div id="currentTime"></div>

<div class="http">
    <h3>Last request</h3>
    <div id="lastRequest"></div>
    <h3>From</h3>
    <div id="from"></div>
    <h3>To</h3>
    <div id="to"></div>
    <h3>Headers</h3>
    <div id="headers"></div>
    <h3>Content</h3>
    <div id="content"></div>
</div>

<!--All this code has the potential to be generated by a simple function. But that's not a job for now.-->
<div class="counters">
    <h3>GET</h3>
    <div id="getCounter"></div>
    <h3>Time of last GET request</h3>
    <div id="getTime"></div>

    <h3>POST</h3>
    <div id="postCounter"></div>
    <h3>Time of last POST request</h3>
    <div id="postTime"></div>

    <h3>PUT</h3>
    <div id="putCounter"></div>
    <h3>Time of last PUT request</h3>
    <div id="putTime"></div>

    <h3>PATCH</h3>
    <div id="patchCounter"></div>
    <h3>Time of last PATCH request</h3>
    <div id="patchTime"></div>

    <h3>DELETE</h3>
    <div id="deleteCounter"></div>
    <h3>Time of last DELETE request</h3>
    <div id="deleteTime"></div>

    <h3>Total number of requests</h3>
    <div id="totalCounter"></div>

</div>

<script src="/components/socket.io-client/socket.io.js"></script>
<script>
    document.getElementById("currentTime").innerHTML = new Date();
    setInterval(function() {
        currentTime.innerHTML = new Date();
    }, 1000);

    var counter = {
        getCounter: 0,
        postCounter: 0,
        putCounter: 0,
        patchCounter: 0,
        deleteCounter: 0,
        totalCounter: function() {
            return this.getCounter + this.postCounter + this.putCounter + this.patchCounter + this.deleteCounter;
        }
    };

    var updateVerbs = function(data) {
        switch(data.request) {
            case "GET":
                document.getElementById("getCounter").innerHTML = ++counter.getCounter;
                document.getElementById("getTime").innerHTML = data.created;
                break;

            case "POST":
                document.getElementById("postCounter").innerHTML = ++counter.postCounter;
                document.getElementById("postTime").innerHTML = data.created;
                break;

            case "PUT":
                document.getElementById("putCounter").innerHTML = ++counter.putCounter;
                document.getElementById("putTime").innerHTML = data.created;
                break;

            case "PATCH":
                document.getElementById("patchCounter").innerHTML = ++counter.patchCounter;
                document.getElementById("patchTime").innerHTML = data.created;
                break;

            case "DELETE":
                document.getElementById("deleteCounter").innerHTML = ++counter.deleteCounter;
                document.getElementById("deleteTime").innerHTML = data.created;
                break;
        }
        document.getElementById("totalCounter").innerHTML = counter.totalCounter();
    }

    var socket = io.connect("http://localhost:3000");
    socket.on("http", function(data) {

        var field = document.getElementById("lastRequest");
        field.innerHTML = data.request;

        updateVerbs(data);

        field = document.getElementById("from");
        field.innerHTML = data.from;
        field = document.getElementById("to");
        field.innerHTML = data.to;
        field = document.getElementById("headers");
        field.innerHTML = data.headers;
        field = document.getElementById("content");
        field.innerHTML = data.content;
    });
</script>

</body>
</html>