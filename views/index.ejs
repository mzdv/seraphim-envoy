<% include layout.ejs %>

<h1><%= title %></h1>
<div id="content">
    <%- markup %>
</div>
<p>Current time and date:</p>   <!-- ReactTime -->
<div id="currentTime"></div>

<div class="http">  <!-- ReactHeader -->
    <h3>Last request</h3>
    <div id="request"></div>
    <h3>From</h3>
    <div id="from"></div>
    <h3>To</h3>
    <div id="to"></div>
    <h3>Headers</h3>
    <div id="headers"></div>
    <h3>Content</h3>
    <div id="content"></div>
</div>

<!--All this code has the potential to be generated by a simple function. But that's not a job for now.-->
<div class="counters">  <!-- ReactCounter -->
    <h3>GET</h3>
    <div id="getCounter"></div>
    <h3>Time of last GET request</h3>
    <div id="getTime"></div>

    <h3>POST</h3>
    <div id="postCounter"></div>
    <h3>Time of last POST request</h3>
    <div id="postTime"></div>

    <h3>PUT</h3>
    <div id="putCounter"></div>
    <h3>Time of last PUT request</h3>
    <div id="putTime"></div>

    <h3>PATCH</h3>
    <div id="patchCounter"></div>
    <h3>Time of last PATCH request</h3>
    <div id="patchTime"></div>

    <h3>DELETE</h3>
    <div id="deleteCounter"></div>
    <h3>Time of last DELETE request</h3>
    <div id="deleteTime"></div>

    <h3>Total number of requests</h3>
    <div id="totalCounter"></div>

</div>

<script src="/components/socket.io-client/socket.io.js"></script>
<script src="/components/lodash/lodash.min.js"></script>
<script>
    'use strict';

    var verbs = [
        'GET',
        'POST',
        'PUT',
        'PATCH',
        'DELETE'
    ];

    document.getElementById("currentTime").innerHTML = new Date();
    setInterval(function() {
        currentTime.innerHTML = new Date();
    }, 1000);

    var counter = {
        getCounter: 0,
        postCounter: 0,
        putCounter: 0,
        patchCounter: 0,
        deleteCounter: 0,
        totalCounter: function() {
            return this.getCounter + this.postCounter + this.putCounter + this.patchCounter + this.deleteCounter;
        }
    };
    var previousCount;

    var updateVerbs = function(data) {
        if(_.includes(verbs, data.request)) {
            var verb = data.request.toLowerCase();
            document.getElementById(verb + "Counter").innerHTML = ++counter[verb + "Counter"];
            document.getElementById(verb + "Time").innerHTML = data.created;
            document.getElementById("totalCounter").innerHTML = counter.totalCounter();
        }
    }

    var socket = io.connect("http://localhost:3000");
    socket.on("http", function(data) {

        updateVerbs(data);

        _.forEach(["request", "from", "to", "headers", "content"], function(n) {
            document.getElementById(n).innerHTML = data[n];
        });
    });

    setInterval(function() {
        if(previousCount !== counter.totalCounter()) {
            var totalCounter = counter.totalCounter();
            var totalRequests = {
                requests: totalCounter,
                timestamp: new Date()
            };
            previousCount = totalCounter;
            socket.emit("totalRequests", JSON.stringify(totalRequests));
        }
    }, 5000);

</script>

</body>
</html>
